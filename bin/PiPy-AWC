#!/usr/bin/env python
import shlex
import sys
import time
from argparse import ArgumentError
from pathlib import Path
from typing import Union, Tuple
import pprint

from pipyawc import Controller, new_parser, process_remote, process_stardard
from pipyawc.awclogger import logger
from pipyawc.modules.peripherals import CheckError
from pipyawc.modules.services import NotifyType

HOME_DIR = Path(__file__).parents[0]
PROMPT = "\nEnter command ('end' to exit prompt; 'kill' to terminate process):\n"


def keyboard_input(controller: Controller):
    """_summary_

    Parameters
    ----------
    controller : Controller
        _description_

    Returns
    -------
    _type_
        _description_
    """
    inp = input(PROMPT)

    if "end" in inp:
        pass
    elif "kill" in inp:
        logger.info("Terminating program...")
        sys.exit(0)
    else:
        try:
            kb_int_cli = new_parser("remote")
            args = kb_int_cli.parse_args(shlex.split(inp))
            logger.debug(f"Received manual input: {args}")
            process_remote(args=args, controller=controller, output="standard")
        except ArgumentError as e:
            logger.error(f"Error! {e}")
            kb_int_cli.print_help()
            keyboard_input(controller)

    return None


def get_controller_interval() -> Tuple[Controller, int]:
    """_summary_

    Returns
    -------
    Tuple[Controller, int]
        _description_
    """
    standard_cli = new_parser("standard")
    args = standard_cli.parse_args()
    controller, interval = process_stardard(args)
    return controller, interval


def pre_run(controller: Controller):
    """_summary_

    Parameters
    ----------
    controller : Controller
        _description_

    Returns
    -------
    bool
        _description_
    """
    initial_values = pprint.pformat(controller.monitor.sensor_values)
    value_report = f"Initial Sensor Values:\n{initial_values}"
    if isinstance(controller.monitor.tank_state, Exception):
        logger.error("Initial Tank State is invalid.")
        logger.debug(value_report)
    else:
        logger.info(f"Initial Tank State is {controller.monitor.tank_state}")
        logger.info(value_report)


def run(controller: Controller, interval: int):
    """_summary_

    Parameters
    ----------
    controller : Controller
        _description_
    interval : int
        _description_
    """
    controller.notify_all(
        title="PiPyAWC has started.",
        body="The automated water changer is now live.",
    )
    last_state: Union[str, CheckError] = ""

    while True:
        try:  # Normal loop action
            time.sleep(interval)
            curr_state = controller.monitor.tank_state
            if last_state != curr_state:
                if isinstance(curr_state, CheckError):
                    sensor_values = controller.monitor.sensor_values
                    body = (
                        "Could not get a valid tank state. An invalid sensor "
                        + "configuration was detected."
                        + f"Current sensor values are:\n{sensor_values}"
                    )
                    controller.notify(
                        contacts=[k for k in controller.messenger.contacts.keys()],
                        title="Could not get a valid tank state. An invalid sensor "
                        + "configuration was detected.",
                        body=body,
                        notify_type=NotifyType.WARNING,
                    )
                last_state = controller.monitor.tank_state

                logger.info(f"Tank state is now: {last_state}")

            controller.schedule.run_pending()

            if any(controller.pending_commands):
                for msg in controller.pending_commands:
                    email_cli = new_parser("remote")
                    cmd = msg.command
                    args = email_cli.parse_args(cmd)

                    try:
                        process_remote(args, controller, "notify", [msg.sender])
                    except ArgumentError as e:
                        controller.notify(
                            contacts=[msg.sender],
                            body="Type --help for help",
                            title=f"Invalid Command {e}",
                            notify_type=NotifyType.WARNING,
                        )

                    controller.pending_commands.remove(msg)

        except KeyboardInterrupt:  # Process an interupt to the main process
            keyboard_input(controller)


def main():
    """_summary_

    Parameters
    ----------
    controller : Controller
        _description_
    interval : int, optional
        _description_, by default 1
    """
    controller, interval = get_controller_interval()
    pre_run(controller)
    run(controller=controller, interval=interval)


if __name__ == "__main__":
    main()
